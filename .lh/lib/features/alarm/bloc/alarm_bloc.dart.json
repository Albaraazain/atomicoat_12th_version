{
    "sourceFile": "lib/features/alarm/bloc/alarm_bloc.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1734534029993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734534147016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,46 +1,151 @@\n import 'package:flutter_bloc/flutter_bloc.dart';\r\n-import '../repository/alarm_repository.dart';\r\n+import '../../../../repositories/alarm_repository.dart';\r\n+import '../../models/alarm.dart';\r\n import 'alarm_event.dart';\r\n import 'alarm_state.dart';\r\n \r\n class AlarmBloc extends Bloc<AlarmEvent, AlarmState> {\r\n-  final AlarmRepository _alarmRepository;\r\n+  final AlarmRepository _repository;\r\n+  final String? userId;\r\n \r\n-  AlarmBloc(this._alarmRepository) : super(AlarmInitial()) {\r\n-    on<LoadAlarms>(_onLoadAlarms);\r\n-    on<AddAlarm>(_onAddAlarm);\r\n-    on<AddSafetyAlarm>(_onAddSafetyAlarm);\r\n-    on<AcknowledgeAlarm>(_onAcknowledgeAlarm);\r\n-    on<ClearAlarm>(_onClearAlarm);\r\n-    on<ClearAcknowledgedAlarms>(_onClearAcknowledgedAlarms);\r\n+  AlarmBloc(this._repository, this.userId) : super(AlarmInitial()) {\r\n+    on<LoadAlarmsEvent>(_onLoadAlarms);\r\n+    on<AddAlarmEvent>(_onAddAlarm);\r\n+    on<AddSafetyAlarmEvent>(_onAddSafetyAlarm);\r\n+    on<AcknowledgeAlarmEvent>(_onAcknowledgeAlarm);\r\n+    on<ClearAlarmEvent>(_onClearAlarm);\r\n+    on<ClearAllAcknowledgedAlarmsEvent>(_onClearAllAcknowledgedAlarms);\r\n+\r\n+    if (userId != null) {\r\n+      add(LoadAlarmsEvent(userId!));\r\n+    }\r\n   }\r\n \r\n-  Future<void> _onLoadAlarms(LoadAlarms event, Emitter<AlarmState> emit) async {\r\n-    emit(AlarmLoading());\r\n+  Future<void> _onLoadAlarms(\r\n+    LoadAlarmsEvent event,\r\n+    Emitter<AlarmState> emit,\r\n+  ) async {\r\n+    emit(AlarmLoadInProgress());\r\n     try {\r\n-      final history = await _alarmRepository.getAll(userId: event.userId);\r\n-      final active = await _alarmRepository.getActiveAlarms(event.userId);\r\n-      emit(AlarmLoaded(activeAlarms: active, alarmHistory: history));\r\n+      final history = await _repository.getAll(userId: event.userId);\r\n+      final active = await _repository.getActiveAlarms(event.userId);\r\n+      emit(AlarmLoadSuccess(activeAlarms: active, alarmHistory: history));\r\n     } catch (e) {\r\n-      emit(AlarmError(e.toString()));\r\n+      emit(AlarmLoadFailure(e.toString()));\r\n     }\r\n   }\r\n \r\n-  Future<void> _onAddAlarm(AddAlarm event, Emitter<AlarmState> emit) async {\r\n+  Future<void> _onAddAlarm(\r\n+    AddAlarmEvent event,\r\n+    Emitter<AlarmState> emit,\r\n+  ) async {\r\n     try {\r\n-      await _alarmRepository.add(event.alarm.id, event.alarm, userId: event.userId);\r\n+      await _repository.add(event.alarm.id, event.alarm, userId: event.userId);\r\n \r\n-      if (state is AlarmLoaded) {\r\n-        final currentState = state as AlarmLoaded;\r\n-        emit(AlarmLoaded(\r\n+      if (state is AlarmLoadSuccess) {\r\n+        final currentState = state as AlarmLoadSuccess;\r\n+        emit(AlarmLoadSuccess(\r\n           activeAlarms: [...currentState.activeAlarms, event.alarm],\r\n           alarmHistory: [...currentState.alarmHistory, event.alarm],\r\n         ));\r\n       }\r\n     } catch (e) {\r\n-      emit(AlarmError(e.toString()));\r\n+      emit(AlarmLoadFailure(e.toString()));\r\n     }\r\n   }\r\n \r\n-  // Implement other event handlers similarly...\r\n+  Future<void> _onAddSafetyAlarm(\r\n+    AddSafetyAlarmEvent event,\r\n+    Emitter<AlarmState> emit,\r\n+  ) async {\r\n+    final newAlarm = Alarm(\r\n+      id: event.id,\r\n+      message: event.message,\r\n+      severity: event.severity,\r\n+      timestamp: DateTime.now(),\r\n+      isSafetyAlert: true,\r\n+    );\r\n+    add(AddAlarmEvent(newAlarm, event.userId));\r\n+  }\r\n+\r\n+  Future<void> _onAcknowledgeAlarm(\r\n+    AcknowledgeAlarmEvent event,\r\n+    Emitter<AlarmState> emit,\r\n+  ) async {\r\n+    if (state is! AlarmLoadSuccess) return;\r\n+    final currentState = state as AlarmLoadSuccess;\r\n+\r\n+    try {\r\n+      final alarmIndex = currentState.activeAlarms\r\n+          .indexWhere((alarm) => alarm.id == event.alarmId);\r\n+\r\n+      if (alarmIndex != -1) {\r\n+        final alarm = currentState.activeAlarms[alarmIndex];\r\n+        final updatedAlarm = alarm.copyWith(acknowledged: true);\r\n+\r\n+        await _repository.update(event.alarmId, updatedAlarm, userId: event.userId);\r\n+\r\n+        final newActiveAlarms = List<Alarm>.from(currentState.activeAlarms)\r\n+          ..removeAt(alarmIndex);\r\n+\r\n+        final newHistory = List<Alarm>.from(currentState.alarmHistory);\r\n+        final historyIndex = newHistory\r\n+            .indexWhere((alarm) => alarm.id == event.alarmId);\r\n+        if (historyIndex != -1) {\r\n+          newHistory[historyIndex] = updatedAlarm;\r\n+        }\r\n+\r\n+        emit(AlarmLoadSuccess(\r\n+          activeAlarms: newActiveAlarms,\r\n+          alarmHistory: newHistory,\r\n+        ));\r\n+      }\r\n+    } catch (e) {\r\n+      emit(AlarmLoadFailure(e.toString()));\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> _onClearAlarm(\r\n+    ClearAlarmEvent event,\r\n+    Emitter<AlarmState> emit,\r\n+  ) async {\r\n+    if (state is! AlarmLoadSuccess) return;\r\n+    final currentState = state as AlarmLoadSuccess;\r\n+\r\n+    try {\r\n+      await _repository.remove(event.alarmId, userId: event.userId);\r\n+\r\n+      emit(AlarmLoadSuccess(\r\n+        activeAlarms: currentState.activeAlarms\r\n+            .where((alarm) => alarm.id != event.alarmId)\r\n+            .toList(),\r\n+        alarmHistory: currentState.alarmHistory\r\n+            .where((alarm) => alarm.id != event.alarmId)\r\n+            .toList(),\r\n+      ));\r\n+    } catch (e) {\r\n+      emit(AlarmLoadFailure(e.toString()));\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> _onClearAllAcknowledgedAlarms(\r\n+    ClearAllAcknowledgedAlarmsEvent event,\r\n+    Emitter<AlarmState> emit,\r\n+  ) async {\r\n+    if (state is! AlarmLoadSuccess) return;\r\n+    final currentState = state as AlarmLoadSuccess;\r\n+\r\n+    try {\r\n+      await _repository.clearAcknowledged(event.userId);\r\n+\r\n+      emit(AlarmLoadSuccess(\r\n+        activeAlarms: currentState.activeAlarms,\r\n+        alarmHistory: currentState.alarmHistory\r\n+            .where((alarm) => !alarm.acknowledged)\r\n+            .toList(),\r\n+      ));\r\n+    } catch (e) {\r\n+      emit(AlarmLoadFailure(e.toString()));\r\n+    }\r\n+  }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734534243276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,150 @@\n+import 'package:flutter_bloc/flutter_bloc.dart';\r\n+import '../../../../repositories/alarm_repository.dart';\r\n+import 'alarm_event.dart';\r\n+import 'alarm_state.dart';\r\n+\r\n+class AlarmBloc extends Bloc<AlarmEvent, AlarmState> {\r\n+  final AlarmRepository _repository;\r\n+  final String? userId;\r\n+\r\n+  AlarmBloc(this._repository, this.userId) : super(AlarmInitial()) {\r\n+    on<LoadAlarmsEvent>(_onLoadAlarms);\r\n+    on<AddAlarmEvent>(_onAddAlarm);\r\n+    on<AddSafetyAlarmEvent>(_onAddSafetyAlarm);\r\n+    on<AcknowledgeAlarmEvent>(_onAcknowledgeAlarm);\r\n+    on<ClearAlarmEvent>(_onClearAlarm);\r\n+    on<ClearAllAcknowledgedAlarmsEvent>(_onClearAllAcknowledgedAlarms);\r\n+\r\n+    if (userId != null) {\r\n+      add(LoadAlarmsEvent(userId!));\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> _onLoadAlarms(\r\n+    LoadAlarmsEvent event,\r\n+    Emitter<AlarmState> emit,\r\n+  ) async {\r\n+    emit(AlarmLoadInProgress());\r\n+    try {\r\n+      final history = await _repository.getAll(userId: event.userId);\r\n+      final active = await _repository.getActiveAlarms(event.userId);\r\n+      emit(AlarmLoadSuccess(activeAlarms: active, alarmHistory: history));\r\n+    } catch (e) {\r\n+      emit(AlarmLoadFailure(e.toString()));\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> _onAddAlarm(\r\n+    AddAlarmEvent event,\r\n+    Emitter<AlarmState> emit,\r\n+  ) async {\r\n+    try {\r\n+      await _repository.add(event.alarm.id, event.alarm, userId: event.userId);\r\n+\r\n+      if (state is AlarmLoadSuccess) {\r\n+        final currentState = state as AlarmLoadSuccess;\r\n+        emit(AlarmLoadSuccess(\r\n+          activeAlarms: [...currentState.activeAlarms, event.alarm],\r\n+          alarmHistory: [...currentState.alarmHistory, event.alarm],\r\n+        ));\r\n+      }\r\n+    } catch (e) {\r\n+      emit(AlarmLoadFailure(e.toString()));\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> _onAddSafetyAlarm(\r\n+    AddSafetyAlarmEvent event,\r\n+    Emitter<AlarmState> emit,\r\n+  ) async {\r\n+    final newAlarm = Alarm(\r\n+      id: event.id,\r\n+      message: event.message,\r\n+      severity: event.severity,\r\n+      timestamp: DateTime.now(),\r\n+      isSafetyAlert: true,\r\n+    );\r\n+    add(AddAlarmEvent(newAlarm, event.userId));\r\n+  }\r\n+\r\n+  Future<void> _onAcknowledgeAlarm(\r\n+    AcknowledgeAlarmEvent event,\r\n+    Emitter<AlarmState> emit,\r\n+  ) async {\r\n+    if (state is! AlarmLoadSuccess) return;\r\n+    final currentState = state as AlarmLoadSuccess;\r\n+\r\n+    try {\r\n+      final alarmIndex = currentState.activeAlarms\r\n+          .indexWhere((alarm) => alarm.id == event.alarmId);\r\n+\r\n+      if (alarmIndex != -1) {\r\n+        final alarm = currentState.activeAlarms[alarmIndex];\r\n+        final updatedAlarm = alarm.copyWith(acknowledged: true);\r\n+\r\n+        await _repository.update(event.alarmId, updatedAlarm, userId: event.userId);\r\n+\r\n+        final newActiveAlarms = List<Alarm>.from(currentState.activeAlarms)\r\n+          ..removeAt(alarmIndex);\r\n+\r\n+        final newHistory = List<Alarm>.from(currentState.alarmHistory);\r\n+        final historyIndex = newHistory\r\n+            .indexWhere((alarm) => alarm.id == event.alarmId);\r\n+        if (historyIndex != -1) {\r\n+          newHistory[historyIndex] = updatedAlarm;\r\n+        }\r\n+\r\n+        emit(AlarmLoadSuccess(\r\n+          activeAlarms: newActiveAlarms,\r\n+          alarmHistory: newHistory,\r\n+        ));\r\n+      }\r\n+    } catch (e) {\r\n+      emit(AlarmLoadFailure(e.toString()));\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> _onClearAlarm(\r\n+    ClearAlarmEvent event,\r\n+    Emitter<AlarmState> emit,\r\n+  ) async {\r\n+    if (state is! AlarmLoadSuccess) return;\r\n+    final currentState = state as AlarmLoadSuccess;\r\n+\r\n+    try {\r\n+      await _repository.remove(event.alarmId, userId: event.userId);\r\n+\r\n+      emit(AlarmLoadSuccess(\r\n+        activeAlarms: currentState.activeAlarms\r\n+            .where((alarm) => alarm.id != event.alarmId)\r\n+            .toList(),\r\n+        alarmHistory: currentState.alarmHistory\r\n+            .where((alarm) => alarm.id != event.alarmId)\r\n+            .toList(),\r\n+      ));\r\n+    } catch (e) {\r\n+      emit(AlarmLoadFailure(e.toString()));\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> _onClearAllAcknowledgedAlarms(\r\n+    ClearAllAcknowledgedAlarmsEvent event,\r\n+    Emitter<AlarmState> emit,\r\n+  ) async {\r\n+    if (state is! AlarmLoadSuccess) return;\r\n+    final currentState = state as AlarmLoadSuccess;\r\n+\r\n+    try {\r\n+      await _repository.clearAcknowledged(event.userId);\r\n+\r\n+      emit(AlarmLoadSuccess(\r\n+        activeAlarms: currentState.activeAlarms,\r\n+        alarmHistory: currentState.alarmHistory\r\n+            .where((alarm) => !alarm.acknowledged)\r\n+            .toList(),\r\n+      ));\r\n+    } catch (e) {\r\n+      emit(AlarmLoadFailure(e.toString()));\r\n+    }\r\n+  }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734534306561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n+import 'package:experiment_planner/features/alarm/models/alarm.dart';\r\n import 'package:flutter_bloc/flutter_bloc.dart';\r\n-import '../../../../repositories/alarm_repository.dart';\r\n+import '../repository/alarm_repository.dart';\r\n import 'alarm_event.dart';\r\n import 'alarm_state.dart';\r\n \r\n class AlarmBloc extends Bloc<AlarmEvent, AlarmState> {\r\n"
                },
                {
                    "date": 1734534560793,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,156 +147,5 @@\n     } catch (e) {\r\n       emit(AlarmLoadFailure(e.toString()));\r\n     }\r\n   }\r\n-}\n-import 'package:flutter_bloc/flutter_bloc.dart';\r\n-import '../../../../repositories/alarm_repository.dart';\r\n-import '../../models/alarm.dart';\r\n-import 'alarm_event.dart';\r\n-import 'alarm_state.dart';\r\n-\r\n-class AlarmBloc extends Bloc<AlarmEvent, AlarmState> {\r\n-  final AlarmRepository _repository;\r\n-  final String? userId;\r\n-\r\n-  AlarmBloc(this._repository, this.userId) : super(AlarmInitial()) {\r\n-    on<LoadAlarmsEvent>(_onLoadAlarms);\r\n-    on<AddAlarmEvent>(_onAddAlarm);\r\n-    on<AddSafetyAlarmEvent>(_onAddSafetyAlarm);\r\n-    on<AcknowledgeAlarmEvent>(_onAcknowledgeAlarm);\r\n-    on<ClearAlarmEvent>(_onClearAlarm);\r\n-    on<ClearAllAcknowledgedAlarmsEvent>(_onClearAllAcknowledgedAlarms);\r\n-\r\n-    if (userId != null) {\r\n-      add(LoadAlarmsEvent(userId!));\r\n-    }\r\n-  }\r\n-\r\n-  Future<void> _onLoadAlarms(\r\n-    LoadAlarmsEvent event,\r\n-    Emitter<AlarmState> emit,\r\n-  ) async {\r\n-    emit(AlarmLoadInProgress());\r\n-    try {\r\n-      final history = await _repository.getAll(userId: event.userId);\r\n-      final active = await _repository.getActiveAlarms(event.userId);\r\n-      emit(AlarmLoadSuccess(activeAlarms: active, alarmHistory: history));\r\n-    } catch (e) {\r\n-      emit(AlarmLoadFailure(e.toString()));\r\n-    }\r\n-  }\r\n-\r\n-  Future<void> _onAddAlarm(\r\n-    AddAlarmEvent event,\r\n-    Emitter<AlarmState> emit,\r\n-  ) async {\r\n-    try {\r\n-      await _repository.add(event.alarm.id, event.alarm, userId: event.userId);\r\n-\r\n-      if (state is AlarmLoadSuccess) {\r\n-        final currentState = state as AlarmLoadSuccess;\r\n-        emit(AlarmLoadSuccess(\r\n-          activeAlarms: [...currentState.activeAlarms, event.alarm],\r\n-          alarmHistory: [...currentState.alarmHistory, event.alarm],\r\n-        ));\r\n-      }\r\n-    } catch (e) {\r\n-      emit(AlarmLoadFailure(e.toString()));\r\n-    }\r\n-  }\r\n-\r\n-  Future<void> _onAddSafetyAlarm(\r\n-    AddSafetyAlarmEvent event,\r\n-    Emitter<AlarmState> emit,\r\n-  ) async {\r\n-    final newAlarm = Alarm(\r\n-      id: event.id,\r\n-      message: event.message,\r\n-      severity: event.severity,\r\n-      timestamp: DateTime.now(),\r\n-      isSafetyAlert: true,\r\n-    );\r\n-    add(AddAlarmEvent(newAlarm, event.userId));\r\n-  }\r\n-\r\n-  Future<void> _onAcknowledgeAlarm(\r\n-    AcknowledgeAlarmEvent event,\r\n-    Emitter<AlarmState> emit,\r\n-  ) async {\r\n-    if (state is! AlarmLoadSuccess) return;\r\n-    final currentState = state as AlarmLoadSuccess;\r\n-\r\n-    try {\r\n-      final alarmIndex = currentState.activeAlarms\r\n-          .indexWhere((alarm) => alarm.id == event.alarmId);\r\n-\r\n-      if (alarmIndex != -1) {\r\n-        final alarm = currentState.activeAlarms[alarmIndex];\r\n-        final updatedAlarm = alarm.copyWith(acknowledged: true);\r\n-\r\n-        await _repository.update(event.alarmId, updatedAlarm, userId: event.userId);\r\n-\r\n-        final newActiveAlarms = List<Alarm>.from(currentState.activeAlarms)\r\n-          ..removeAt(alarmIndex);\r\n-\r\n-        final newHistory = List<Alarm>.from(currentState.alarmHistory);\r\n-        final historyIndex = newHistory\r\n-            .indexWhere((alarm) => alarm.id == event.alarmId);\r\n-        if (historyIndex != -1) {\r\n-          newHistory[historyIndex] = updatedAlarm;\r\n-        }\r\n-\r\n-        emit(AlarmLoadSuccess(\r\n-          activeAlarms: newActiveAlarms,\r\n-          alarmHistory: newHistory,\r\n-        ));\r\n-      }\r\n-    } catch (e) {\r\n-      emit(AlarmLoadFailure(e.toString()));\r\n-    }\r\n-  }\r\n-\r\n-  Future<void> _onClearAlarm(\r\n-    ClearAlarmEvent event,\r\n-    Emitter<AlarmState> emit,\r\n-  ) async {\r\n-    if (state is! AlarmLoadSuccess) return;\r\n-    final currentState = state as AlarmLoadSuccess;\r\n-\r\n-    try {\r\n-      await _repository.remove(event.alarmId, userId: event.userId);\r\n-\r\n-      emit(AlarmLoadSuccess(\r\n-        activeAlarms: currentState.activeAlarms\r\n-            .where((alarm) => alarm.id != event.alarmId)\r\n-            .toList(),\r\n-        alarmHistory: currentState.alarmHistory\r\n-            .where((alarm) => alarm.id != event.alarmId)\r\n-            .toList(),\r\n-      ));\r\n-    } catch (e) {\r\n-      emit(AlarmLoadFailure(e.toString()));\r\n-    }\r\n-  }\r\n-\r\n-  Future<void> _onClearAllAcknowledgedAlarms(\r\n-    ClearAllAcknowledgedAlarmsEvent event,\r\n-    Emitter<AlarmState> emit,\r\n-  ) async {\r\n-    if (state is! AlarmLoadSuccess) return;\r\n-    final currentState = state as AlarmLoadSuccess;\r\n-\r\n-    try {\r\n-      await _repository.clearAcknowledged(event.userId);\r\n-\r\n-      emit(AlarmLoadSuccess(\r\n-        activeAlarms: currentState.activeAlarms,\r\n-        alarmHistory: currentState.alarmHistory\r\n-            .where((alarm) => !alarm.acknowledged)\r\n-            .toList(),\r\n-      ));\r\n-    } catch (e) {\r\n-      emit(AlarmLoadFailure(e.toString()));\r\n-    }\r\n-  }\r\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1734534029993,
            "name": "Commit-0",
            "content": "import 'package:flutter_bloc/flutter_bloc.dart';\r\nimport '../repository/alarm_repository.dart';\r\nimport 'alarm_event.dart';\r\nimport 'alarm_state.dart';\r\n\r\nclass AlarmBloc extends Bloc<AlarmEvent, AlarmState> {\r\n  final AlarmRepository _alarmRepository;\r\n\r\n  AlarmBloc(this._alarmRepository) : super(AlarmInitial()) {\r\n    on<LoadAlarms>(_onLoadAlarms);\r\n    on<AddAlarm>(_onAddAlarm);\r\n    on<AddSafetyAlarm>(_onAddSafetyAlarm);\r\n    on<AcknowledgeAlarm>(_onAcknowledgeAlarm);\r\n    on<ClearAlarm>(_onClearAlarm);\r\n    on<ClearAcknowledgedAlarms>(_onClearAcknowledgedAlarms);\r\n  }\r\n\r\n  Future<void> _onLoadAlarms(LoadAlarms event, Emitter<AlarmState> emit) async {\r\n    emit(AlarmLoading());\r\n    try {\r\n      final history = await _alarmRepository.getAll(userId: event.userId);\r\n      final active = await _alarmRepository.getActiveAlarms(event.userId);\r\n      emit(AlarmLoaded(activeAlarms: active, alarmHistory: history));\r\n    } catch (e) {\r\n      emit(AlarmError(e.toString()));\r\n    }\r\n  }\r\n\r\n  Future<void> _onAddAlarm(AddAlarm event, Emitter<AlarmState> emit) async {\r\n    try {\r\n      await _alarmRepository.add(event.alarm.id, event.alarm, userId: event.userId);\r\n\r\n      if (state is AlarmLoaded) {\r\n        final currentState = state as AlarmLoaded;\r\n        emit(AlarmLoaded(\r\n          activeAlarms: [...currentState.activeAlarms, event.alarm],\r\n          alarmHistory: [...currentState.alarmHistory, event.alarm],\r\n        ));\r\n      }\r\n    } catch (e) {\r\n      emit(AlarmError(e.toString()));\r\n    }\r\n  }\r\n\r\n  // Implement other event handlers similarly...\r\n}"
        }
    ]
}