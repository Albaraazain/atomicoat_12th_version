{
    "sourceFile": "lib/features/alarm/bloc/alarm_state.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1734534007687,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734534140060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,61 +1,60 @@\n import 'package:equatable/equatable.dart';\r\n-import '../models/alarm.dart';\r\n+import '../../models/alarm.dart';\r\n \r\n-abstract class AlarmState extends Equatable {\r\n+sealed class AlarmState extends Equatable {\r\n   const AlarmState();\r\n \r\n   @override\r\n   List<Object?> get props => [];\r\n }\r\n \r\n class AlarmInitial extends AlarmState {}\r\n \r\n-class AlarmLoading extends AlarmState {}\r\n+class AlarmLoadInProgress extends AlarmState {}\r\n \r\n-class AlarmLoaded extends AlarmState {\r\n+class AlarmLoadSuccess extends AlarmState {\r\n   final List<Alarm> activeAlarms;\r\n   final List<Alarm> alarmHistory;\r\n \r\n-  const AlarmLoaded({\r\n+  const AlarmLoadSuccess({\r\n     required this.activeAlarms,\r\n     required this.alarmHistory,\r\n   });\r\n \r\n   @override\r\n   List<Object?> get props => [activeAlarms, alarmHistory];\r\n \r\n-  AlarmLoaded copyWith({\r\n-    List<Alarm>? activeAlarms,\r\n-    List<Alarm>? alarmHistory,\r\n-  }) {\r\n-    return AlarmLoaded(\r\n-      activeAlarms: activeAlarms ?? this.activeAlarms,\r\n-      alarmHistory: alarmHistory ?? this.alarmHistory,\r\n-    );\r\n-  }\r\n-\r\n   List<Alarm> get criticalAlarms =>\r\n-      activeAlarms.where((alarm) => alarm.severity == AlarmSeverity.critical).toList();\r\n+    activeAlarms.where((alarm) => alarm.severity == AlarmSeverity.critical).toList();\r\n \r\n   bool get hasActiveAlarms => activeAlarms.isNotEmpty;\r\n-\r\n   bool get hasCriticalAlarm =>\r\n-      activeAlarms.any((alarm) => alarm.severity == AlarmSeverity.critical);\r\n+    activeAlarms.any((alarm) => alarm.severity == AlarmSeverity.critical);\r\n \r\n-  Map<String, int> get statistics => {\r\n-    'total': alarmHistory.length,\r\n-    'critical': alarmHistory.where((a) => a.severity == AlarmSeverity.critical).length,\r\n-    'warning': alarmHistory.where((a) => a.severity == AlarmSeverity.warning).length,\r\n-    'info': alarmHistory.where((a) => a.severity == AlarmSeverity.info).length,\r\n-    'acknowledged': alarmHistory.where((a) => a.acknowledged).length,\r\n-    'unacknowledged': alarmHistory.where((a) => !a.acknowledged).length,\r\n-  };\r\n+  List<Alarm> getAlarmsBySeverity(AlarmSeverity severity) {\r\n+    return activeAlarms.where((alarm) => alarm.severity == severity).toList();\r\n+  }\r\n+\r\n+  List<Alarm> getRecentAlarms({int count = 5}) {\r\n+    return alarmHistory.reversed.take(count).toList();\r\n+  }\r\n+\r\n+  Map<String, int> getAlarmStatistics() {\r\n+    return {\r\n+      'total': alarmHistory.length,\r\n+      'critical': alarmHistory.where((a) => a.severity == AlarmSeverity.critical).length,\r\n+      'warning': alarmHistory.where((a) => a.severity == AlarmSeverity.warning).length,\r\n+      'info': alarmHistory.where((a) => a.severity == AlarmSeverity.info).length,\r\n+      'acknowledged': alarmHistory.where((a) => a.acknowledged).length,\r\n+      'unacknowledged': alarmHistory.where((a) => !a.acknowledged).length,\r\n+    };\r\n+  }\r\n }\r\n \r\n-class AlarmError extends AlarmState {\r\n-  final String message;\r\n-  const AlarmError(this.message);\r\n+class AlarmLoadFailure extends AlarmState {\r\n+  final String error;\r\n+  const AlarmLoadFailure(this.error);\r\n \r\n   @override\r\n-  List<Object?> get props => [message];\r\n+  List<Object?> get props => [error];\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734534517859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n import 'package:equatable/equatable.dart';\r\n-import '../../models/alarm.dart';\r\n \r\n sealed class AlarmState extends Equatable {\r\n   const AlarmState();\r\n \r\n"
                },
                {
                    "date": 1734534536361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n import 'package:equatable/equatable.dart';\r\n+import 'package:experiment_planner/features/alarm/models/alarm.dart';\r\n \r\n+\r\n sealed class AlarmState extends Equatable {\r\n   const AlarmState();\r\n \r\n   @override\r\n"
                }
            ],
            "date": 1734534007687,
            "name": "Commit-0",
            "content": "import 'package:equatable/equatable.dart';\r\nimport '../models/alarm.dart';\r\n\r\nabstract class AlarmState extends Equatable {\r\n  const AlarmState();\r\n\r\n  @override\r\n  List<Object?> get props => [];\r\n}\r\n\r\nclass AlarmInitial extends AlarmState {}\r\n\r\nclass AlarmLoading extends AlarmState {}\r\n\r\nclass AlarmLoaded extends AlarmState {\r\n  final List<Alarm> activeAlarms;\r\n  final List<Alarm> alarmHistory;\r\n\r\n  const AlarmLoaded({\r\n    required this.activeAlarms,\r\n    required this.alarmHistory,\r\n  });\r\n\r\n  @override\r\n  List<Object?> get props => [activeAlarms, alarmHistory];\r\n\r\n  AlarmLoaded copyWith({\r\n    List<Alarm>? activeAlarms,\r\n    List<Alarm>? alarmHistory,\r\n  }) {\r\n    return AlarmLoaded(\r\n      activeAlarms: activeAlarms ?? this.activeAlarms,\r\n      alarmHistory: alarmHistory ?? this.alarmHistory,\r\n    );\r\n  }\r\n\r\n  List<Alarm> get criticalAlarms =>\r\n      activeAlarms.where((alarm) => alarm.severity == AlarmSeverity.critical).toList();\r\n\r\n  bool get hasActiveAlarms => activeAlarms.isNotEmpty;\r\n\r\n  bool get hasCriticalAlarm =>\r\n      activeAlarms.any((alarm) => alarm.severity == AlarmSeverity.critical);\r\n\r\n  Map<String, int> get statistics => {\r\n    'total': alarmHistory.length,\r\n    'critical': alarmHistory.where((a) => a.severity == AlarmSeverity.critical).length,\r\n    'warning': alarmHistory.where((a) => a.severity == AlarmSeverity.warning).length,\r\n    'info': alarmHistory.where((a) => a.severity == AlarmSeverity.info).length,\r\n    'acknowledged': alarmHistory.where((a) => a.acknowledged).length,\r\n    'unacknowledged': alarmHistory.where((a) => !a.acknowledged).length,\r\n  };\r\n}\r\n\r\nclass AlarmError extends AlarmState {\r\n  final String message;\r\n  const AlarmError(this.message);\r\n\r\n  @override\r\n  List<Object?> get props => [message];\r\n}"
        }
    ]
}