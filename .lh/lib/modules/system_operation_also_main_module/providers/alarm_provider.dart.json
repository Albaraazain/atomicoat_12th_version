{
    "sourceFile": "lib/modules/system_operation_also_main_module/providers/alarm_provider.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1734534315008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734534330394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,121 +1,115 @@\n-// lib/modules/system_operation_also_main_module/providers/alarm_provider.dart\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter_bloc/flutter_bloc.dart';\r\n+import 'package:provider/provider.dart';\r\n+import 'package:provider/single_child_widget.dart';\r\n \r\n-import 'package:flutter/foundation.dart';\r\n-import '../../../features/alarm/repository/alarm_repository.dart';\r\n-import '../../../features/alarm/models/alarm.dart';\r\n-import '../../../services/auth_service.dart';\r\n+// Services\r\n+import 'package:experiment_planner/services/auth_service.dart';\r\n+import 'package:experiment_planner/services/navigation_service.dart';\r\n \r\n-class AlarmProvider with ChangeNotifier {\r\n-  final AlarmRepository _alarmRepository = AlarmRepository();\r\n-  final AuthService _authService;\r\n-  List<Alarm> _activeAlarms = [];\r\n-  List<Alarm> _alarmHistory = [];\r\n+// Repositories\r\n+import 'package:experiment_planner/repositories/system_state_repository.dart';\r\n+import 'package:experiment_planner/repositories/alarm_repository.dart';\r\n \r\n-  List<Alarm> get activeAlarms => _activeAlarms;\r\n-  List<Alarm> get alarmHistory => _alarmHistory;\r\n-  List<Alarm> get criticalAlarms => _activeAlarms.where((alarm) => alarm.severity == AlarmSeverity.critical).toList();\r\n+// Providers\r\n+import 'package:experiment_planner/providers/auth_provider.dart';\r\n \r\n-  AlarmProvider(this._authService) {\r\n-    _loadAlarms();\r\n-  }\r\n+// Maintenance Module Providers\r\n+import 'package:experiment_planner/modules/maintenance_module/providers/maintenance_provider.dart';\r\n+import 'package:experiment_planner/modules/maintenance_module/providers/calibration_provider.dart';\r\n+import 'package:experiment_planner/modules/maintenance_module/providers/spare_parts_provider.dart';\r\n+import 'package:experiment_planner/modules/maintenance_module/providers/report_provider.dart';\r\n \r\n-  Future<void> _loadAlarms() async {\r\n-    String? userId = _authService.currentUserId;\r\n-    if (userId != null) {\r\n-      _alarmHistory = await _alarmRepository.getAll(userId: userId);\r\n-      _activeAlarms = await _alarmRepository.getActiveAlarms(userId);\r\n-      notifyListeners();\r\n-    }\r\n-  }\r\n+// System Operation Module Providers\r\n+import 'package:experiment_planner/modules/system_operation_also_main_module/providers/recipe_provider.dart';\r\n+import 'package:experiment_planner/modules/system_operation_also_main_module/providers/safety_error_provider.dart';\r\n+import 'package:experiment_planner/modules/system_operation_also_main_module/providers/system_copmonent_provider.dart';\r\n+import 'package:experiment_planner/modules/system_operation_also_main_module/providers/system_state_provider.dart';\r\n \r\n-  Future<void> addAlarm(Alarm alarm) async {\r\n-    String? userId = _authService.currentUserId;\r\n-    if (userId != null) {\r\n-      await _alarmRepository.add(alarm.id, alarm, userId: userId);\r\n-      _activeAlarms.add(alarm);\r\n-      _alarmHistory.add(alarm);\r\n-      notifyListeners();\r\n-    }\r\n-  }\r\n+// New Alarm BLoC\r\n+import 'package:experiment_planner/modules/system_operation_also_main_module/features/alarm/bloc/alarm_bloc.dart';\r\n \r\n-  Future<void> addSafetyAlarm(String id, String message, AlarmSeverity severity) async {\r\n-    final newAlarm = Alarm(\r\n-      id: id,\r\n-      message: message,\r\n-      severity: severity,\r\n-      timestamp: DateTime.now(),\r\n-      isSafetyAlert: true,\r\n-    );\r\n-    await addAlarm(newAlarm);\r\n-  }\r\n+class ProviderConfig {\r\n+  static List<SingleChildWidget> get providers => [\r\n+        // Services\r\n+        Provider<NavigationService>(\r\n+          create: (_) => NavigationService(),\r\n+        ),\r\n+        Provider<AuthService>(\r\n+          create: (_) => AuthService(),\r\n+        ),\r\n+        Provider<SystemStateRepository>(\r\n+          create: (_) => SystemStateRepository(),\r\n+        ),\r\n \r\n-  Future<void> acknowledgeAlarm(String alarmId) async {\r\n-    String? userId = _authService.currentUserId;\r\n-    if (userId != null) {\r\n-      final alarmIndex = _activeAlarms.indexWhere((alarm) => alarm.id == alarmId);\r\n-      if (alarmIndex != -1) {\r\n-        final updatedAlarm = _activeAlarms[alarmIndex].copyWith(acknowledged: true);\r\n-        await _alarmRepository.update(alarmId, updatedAlarm, userId: userId);\r\n-        _activeAlarms.removeAt(alarmIndex);\r\n-        final historyIndex = _alarmHistory.indexWhere((alarm) => alarm.id == alarmId);\r\n-        if (historyIndex != -1) {\r\n-          _alarmHistory[historyIndex] = updatedAlarm;\r\n-        }\r\n-        notifyListeners();\r\n-      }\r\n-    }\r\n-  }\r\n+        // Repositories\r\n+        Provider<AlarmRepository>(\r\n+          create: (_) => AlarmRepository(),\r\n+        ),\r\n \r\n-  Future<void> clearAlarm(String alarmId) async {\r\n-    String? userId = _authService.currentUserId;\r\n-    if (userId != null) {\r\n-      await _alarmRepository.remove(alarmId, userId: userId);\r\n-      _activeAlarms.removeWhere((alarm) => alarm.id == alarmId);\r\n-      _alarmHistory.removeWhere((alarm) => alarm.id == alarmId);\r\n-      notifyListeners();\r\n-    }\r\n-  }\r\n+        // Global Providers\r\n+        ChangeNotifierProvider(\r\n+          create: (context) => AuthProvider(context.read<AuthService>()),\r\n+        ),\r\n+        ChangeNotifierProvider(\r\n+          create: (_) => SystemComponentProvider(),\r\n+        ),\r\n \r\n-  Future<void> clearAllAcknowledgedAlarms() async {\r\n-    String? userId = _authService.currentUserId;\r\n-    if (userId != null) {\r\n-      await _alarmRepository.clearAcknowledged(userId);\r\n-      _alarmHistory.removeWhere((alarm) => alarm.acknowledged);\r\n-      notifyListeners();\r\n-    }\r\n-  }\r\n+        // BLoC Providers\r\n+        BlocProvider<AlarmBloc>(\r\n+          create: (context) => AlarmBloc(\r\n+            context.read<AlarmRepository>(),\r\n+            context.read<AuthService>().currentUserId,\r\n+          ),\r\n+        ),\r\n \r\n-  // The following methods work on the local lists\r\n+        // Maintenance Module Providers\r\n+        ChangeNotifierProvider(\r\n+          create: (context) => MaintenanceProvider(\r\n+            context.read<SystemComponentProvider>(),\r\n+          ),\r\n+        ),\r\n+        ChangeNotifierProvider(\r\n+          create: (context) => CalibrationProvider(\r\n+            context.read<SystemComponentProvider>(),\r\n+          ),\r\n+        ),\r\n+        ChangeNotifierProvider(\r\n+          create: (_) => SparePartsProvider(),\r\n+        ),\r\n \r\n-  List<Alarm> getAlarmsBySeverity(AlarmSeverity severity) {\r\n-    return _activeAlarms.where((alarm) => alarm.severity == severity).toList();\r\n-  }\r\n+        // System Operation Module Providers\r\n+        ChangeNotifierProvider(\r\n+          create: (context) => SafetyErrorProvider(context.read<AuthService>()),\r\n+        ),\r\n+        ChangeNotifierProvider(\r\n+          create: (context) => RecipeProvider(context.read<AuthService>()),\r\n+        ),\r\n \r\n-  bool get hasActiveAlarms => _activeAlarms.isNotEmpty;\r\n+        // System State Provider\r\n+        ChangeNotifierProxyProvider4<SystemComponentProvider, RecipeProvider,\r\n+            SystemStateRepository, AuthService, SystemStateProvider>(\r\n+          create: (context) => SystemStateProvider(\r\n+            context.read<SystemComponentProvider>(),\r\n+            context.read<RecipeProvider>(),\r\n+            context.read<AlarmBloc>(), // Now passing AlarmBloc instead of AlarmProvider\r\n+            context.read<SystemStateRepository>(),\r\n+            context.read<AuthService>(),\r\n+          ),\r\n+          update: (context, componentProvider, recipeProvider,\r\n+                  systemStateRepository, authService, previous) =>\r\n+              previous!..updateProviders(recipeProvider),\r\n+        ),\r\n \r\n-  bool get hasCriticalAlarm => _activeAlarms.any((alarm) => alarm.severity == AlarmSeverity.critical);\r\n-\r\n-  List<Alarm> getRecentAlarms({int count = 5}) {\r\n-    return _alarmHistory.reversed.take(count).toList();\r\n-  }\r\n-\r\n-  Future<String> exportAlarmHistory() async {\r\n-    return _alarmHistory\r\n-        .map((alarm) =>\r\n-    '${alarm.timestamp.toIso8601String()},${alarm.severity.toString().split('.').last},${alarm.message},${alarm.acknowledged}')\r\n-        .join('\\n');\r\n-  }\r\n-\r\n-  Map<String, int> getAlarmStatistics() {\r\n-    return {\r\n-      'total': _alarmHistory.length,\r\n-      'critical': _alarmHistory\r\n-          .where((a) => a.severity == AlarmSeverity.critical)\r\n-          .length,\r\n-      'warning': _alarmHistory.where((a) => a.severity == AlarmSeverity.warning).length,\r\n-      'info': _alarmHistory.where((a) => a.severity == AlarmSeverity.info).length,\r\n-      'acknowledged': _alarmHistory.where((a) => a.acknowledged).length,\r\n-      'unacknowledged': _alarmHistory.where((a) => !a.acknowledged).length,\r\n-    };\r\n-  }\r\n+        // Maintenance Module Report Provider\r\n+        ChangeNotifierProxyProvider2<MaintenanceProvider, CalibrationProvider,\r\n+            ReportProvider>(\r\n+          create: (context) => ReportProvider(\r\n+            context.read<MaintenanceProvider>(),\r\n+            context.read<CalibrationProvider>(),\r\n+          ),\r\n+          update: (context, maintenance, calibration, previous) =>\r\n+              previous!..updateProviders(maintenance, calibration),\r\n+        ),\r\n+      ];\r\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1734534315008,
            "name": "Commit-0",
            "content": "// lib/modules/system_operation_also_main_module/providers/alarm_provider.dart\r\n\r\nimport 'package:flutter/foundation.dart';\r\nimport '../../../features/alarm/repository/alarm_repository.dart';\r\nimport '../../../features/alarm/models/alarm.dart';\r\nimport '../../../services/auth_service.dart';\r\n\r\nclass AlarmProvider with ChangeNotifier {\r\n  final AlarmRepository _alarmRepository = AlarmRepository();\r\n  final AuthService _authService;\r\n  List<Alarm> _activeAlarms = [];\r\n  List<Alarm> _alarmHistory = [];\r\n\r\n  List<Alarm> get activeAlarms => _activeAlarms;\r\n  List<Alarm> get alarmHistory => _alarmHistory;\r\n  List<Alarm> get criticalAlarms => _activeAlarms.where((alarm) => alarm.severity == AlarmSeverity.critical).toList();\r\n\r\n  AlarmProvider(this._authService) {\r\n    _loadAlarms();\r\n  }\r\n\r\n  Future<void> _loadAlarms() async {\r\n    String? userId = _authService.currentUserId;\r\n    if (userId != null) {\r\n      _alarmHistory = await _alarmRepository.getAll(userId: userId);\r\n      _activeAlarms = await _alarmRepository.getActiveAlarms(userId);\r\n      notifyListeners();\r\n    }\r\n  }\r\n\r\n  Future<void> addAlarm(Alarm alarm) async {\r\n    String? userId = _authService.currentUserId;\r\n    if (userId != null) {\r\n      await _alarmRepository.add(alarm.id, alarm, userId: userId);\r\n      _activeAlarms.add(alarm);\r\n      _alarmHistory.add(alarm);\r\n      notifyListeners();\r\n    }\r\n  }\r\n\r\n  Future<void> addSafetyAlarm(String id, String message, AlarmSeverity severity) async {\r\n    final newAlarm = Alarm(\r\n      id: id,\r\n      message: message,\r\n      severity: severity,\r\n      timestamp: DateTime.now(),\r\n      isSafetyAlert: true,\r\n    );\r\n    await addAlarm(newAlarm);\r\n  }\r\n\r\n  Future<void> acknowledgeAlarm(String alarmId) async {\r\n    String? userId = _authService.currentUserId;\r\n    if (userId != null) {\r\n      final alarmIndex = _activeAlarms.indexWhere((alarm) => alarm.id == alarmId);\r\n      if (alarmIndex != -1) {\r\n        final updatedAlarm = _activeAlarms[alarmIndex].copyWith(acknowledged: true);\r\n        await _alarmRepository.update(alarmId, updatedAlarm, userId: userId);\r\n        _activeAlarms.removeAt(alarmIndex);\r\n        final historyIndex = _alarmHistory.indexWhere((alarm) => alarm.id == alarmId);\r\n        if (historyIndex != -1) {\r\n          _alarmHistory[historyIndex] = updatedAlarm;\r\n        }\r\n        notifyListeners();\r\n      }\r\n    }\r\n  }\r\n\r\n  Future<void> clearAlarm(String alarmId) async {\r\n    String? userId = _authService.currentUserId;\r\n    if (userId != null) {\r\n      await _alarmRepository.remove(alarmId, userId: userId);\r\n      _activeAlarms.removeWhere((alarm) => alarm.id == alarmId);\r\n      _alarmHistory.removeWhere((alarm) => alarm.id == alarmId);\r\n      notifyListeners();\r\n    }\r\n  }\r\n\r\n  Future<void> clearAllAcknowledgedAlarms() async {\r\n    String? userId = _authService.currentUserId;\r\n    if (userId != null) {\r\n      await _alarmRepository.clearAcknowledged(userId);\r\n      _alarmHistory.removeWhere((alarm) => alarm.acknowledged);\r\n      notifyListeners();\r\n    }\r\n  }\r\n\r\n  // The following methods work on the local lists\r\n\r\n  List<Alarm> getAlarmsBySeverity(AlarmSeverity severity) {\r\n    return _activeAlarms.where((alarm) => alarm.severity == severity).toList();\r\n  }\r\n\r\n  bool get hasActiveAlarms => _activeAlarms.isNotEmpty;\r\n\r\n  bool get hasCriticalAlarm => _activeAlarms.any((alarm) => alarm.severity == AlarmSeverity.critical);\r\n\r\n  List<Alarm> getRecentAlarms({int count = 5}) {\r\n    return _alarmHistory.reversed.take(count).toList();\r\n  }\r\n\r\n  Future<String> exportAlarmHistory() async {\r\n    return _alarmHistory\r\n        .map((alarm) =>\r\n    '${alarm.timestamp.toIso8601String()},${alarm.severity.toString().split('.').last},${alarm.message},${alarm.acknowledged}')\r\n        .join('\\n');\r\n  }\r\n\r\n  Map<String, int> getAlarmStatistics() {\r\n    return {\r\n      'total': _alarmHistory.length,\r\n      'critical': _alarmHistory\r\n          .where((a) => a.severity == AlarmSeverity.critical)\r\n          .length,\r\n      'warning': _alarmHistory.where((a) => a.severity == AlarmSeverity.warning).length,\r\n      'info': _alarmHistory.where((a) => a.severity == AlarmSeverity.info).length,\r\n      'acknowledged': _alarmHistory.where((a) => a.acknowledged).length,\r\n      'unacknowledged': _alarmHistory.where((a) => !a.acknowledged).length,\r\n    };\r\n  }\r\n}"
        }
    ]
}