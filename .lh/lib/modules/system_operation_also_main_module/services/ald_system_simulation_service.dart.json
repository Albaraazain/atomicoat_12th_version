{
    "sourceFile": "lib/modules/system_operation_also_main_module/services/ald_system_simulation_service.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1734534431207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1734534431207,
            "name": "Commit-0",
            "content": "import 'dart:async';\r\nimport 'dart:math';\r\nimport 'package:experiment_planner/features/alarm/models/alarm.dart';\r\nimport '../providers/system_state_provider.dart';\r\n\r\nclass AldSystemSimulationService {\r\n  final SystemStateProvider systemStateProvider;\r\n  Timer? _simulationTimer;\r\n  final Random _random = Random();\r\n\r\n  // Constants\r\n  static const int SIMULATION_INTERVAL_MS = 500; // Increased from 100ms to 500ms\r\n  static const double BASE_GROWTH_PER_CYCLE = 0.1; // nm per cycle\r\n  static const double OPTIMAL_TEMPERATURE = 200.0; // Â°C\r\n  static const double OPTIMAL_PRESSURE = 1.0; // atm\r\n\r\n  // Define dependencies where certain components affect others\r\n  final Map<String, List<String>> _dependencies = {\r\n    'MFC': ['Nitrogen Generator'],\r\n    'Pressure Control System': ['Reaction Chamber'],\r\n  };\r\n\r\n  AldSystemSimulationService({required this.systemStateProvider});\r\n\r\n  void startSimulation() {\r\n    _simulationTimer = Timer.periodic(const Duration(milliseconds: SIMULATION_INTERVAL_MS), (_) => _simulateTick());\r\n    systemStateProvider.addAlarm(\"ALD System Simulation started.\", AlarmSeverity.info);\r\n  }\r\n\r\n  void stopSimulation() {\r\n    _simulationTimer?.cancel();\r\n    _simulationTimer = null;\r\n    systemStateProvider.addAlarm(\"ALD System Simulation stopped.\", AlarmSeverity.info);\r\n  }\r\n\r\n  void _simulateTick() {\r\n    _updateComponentStates();\r\n    _generateRandomErrors();\r\n    _checkSafetyConditions();\r\n  }\r\n\r\n  void _checkSafetyConditions() {\r\n    final reactionChamber = systemStateProvider.getComponentByName('Reaction Chamber');\r\n    if (reactionChamber == null) {\r\n      systemStateProvider.addAlarm(\"Error: Reaction Chamber not found!\", AlarmSeverity.critical);\r\n      return;\r\n    }\r\n\r\n    double chamberPressure = reactionChamber.currentValues['pressure'] ?? 0.0;\r\n    double chamberTemperature = reactionChamber.currentValues['temperature'] ?? 0.0;\r\n\r\n    if (chamberPressure > 10.0) {\r\n      systemStateProvider.addAlarm(\"Chamber overpressure detected!\", AlarmSeverity.critical);\r\n    }\r\n\r\n    if (chamberTemperature > 300.0) {\r\n      systemStateProvider.addAlarm(\"Chamber overtemperature detected!\", AlarmSeverity.critical);\r\n    }\r\n  }\r\n\r\n  void _updateComponentStates() {\r\n    Map<String, Map<String, double>> updates = {};\r\n\r\n    for (var component in systemStateProvider.components.values) {\r\n      if (!component.isActivated) continue;\r\n\r\n      Map<String, double> componentUpdates = {};\r\n\r\n      component.currentValues.forEach((parameter, value) {\r\n        double newValue = _generateNewValue(component.name, parameter, value);\r\n        componentUpdates[parameter] = newValue;\r\n      });\r\n\r\n      if (componentUpdates.isNotEmpty) {\r\n        updates[component.name] = componentUpdates;\r\n      }\r\n    }\r\n\r\n    systemStateProvider.batchUpdateComponentValues(updates);\r\n    _applyDependencies(updates);\r\n  }\r\n\r\n  void _applyDependencies(Map<String, Map<String, double>> updates) {\r\n    Map<String, Map<String, double>> dependencyUpdates = {};\r\n\r\n    updates.forEach((componentName, newStates) {\r\n      if (_dependencies.containsKey(componentName)) {\r\n        for (var dependentName in _dependencies[componentName]!) {\r\n          var dependentComponent = systemStateProvider.getComponentByName(dependentName);\r\n          if (dependentComponent != null) {\r\n            if (componentName == 'MFC' && newStates.containsKey('flow_rate')) {\r\n              double mfcFlowRate = newStates['flow_rate']!;\r\n              double adjustedFlowRate = _adjustDependentValue(mfcFlowRate, 0.8, 0.2);\r\n              dependencyUpdates[dependentName] = {'flow_rate': adjustedFlowRate};\r\n            }\r\n\r\n            if (componentName == 'Pressure Control System' && newStates.containsKey('pressure')) {\r\n              double pcsPressure = newStates['pressure']!;\r\n              double adjustedPressure = _adjustDependentValue(pcsPressure, 0.9, 0.1);\r\n              dependencyUpdates[dependentName] = {'pressure': adjustedPressure};\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    if (dependencyUpdates.isNotEmpty) {\r\n      systemStateProvider.batchUpdateComponentValues(dependencyUpdates);\r\n    }\r\n  }\r\n\r\n  double _adjustDependentValue(double baseValue, double factor, double fluctuation) {\r\n    double adjustedValue = baseValue * factor + _random.nextDouble() * fluctuation * 2 - fluctuation;\r\n    return adjustedValue.clamp(0.0, double.infinity);\r\n  }\r\n\r\n  void _generateRandomErrors() {\r\n    for (var alarm in systemStateProvider.activeAlarms) {\r\n      if (alarm.message.contains('Mass Flow Controller Malfunction')) {\r\n        systemStateProvider.updateComponentCurrentValues('MFC', {'flow_rate': 0.0});\r\n      }\r\n    }\r\n  }\r\n\r\n  double _generateNewValue(String componentName, String parameter, double currentValue) {\r\n    double fluctuationRange = _getFluctuationRange(parameter);\r\n    double delta = (_random.nextDouble() * fluctuationRange * 2) - fluctuationRange;\r\n    double setpoint = systemStateProvider.getComponentByName(componentName)?.setValues[parameter] ?? currentValue;\r\n    double newValue = _moveTowards(currentValue, setpoint, step: 0.1) + delta;\r\n    return _clampValue(componentName, parameter, newValue);\r\n  }\r\n\r\n  double _getFluctuationRange(String parameter) {\r\n    switch (parameter) {\r\n      case 'flow_rate': return 2.0;\r\n      case 'temperature': return 5.0;\r\n      case 'pressure': return 0.05;\r\n      case 'power': return 1.0;\r\n      case 'status': return 0.05;\r\n      default: return 1.0;\r\n    }\r\n  }\r\n\r\n  double _moveTowards(double current, double target, {required double step}) {\r\n    return (current < target) ? (current + step).clamp(current, target) :\r\n    (current > target) ? (current - step).clamp(target, current) :\r\n    current;\r\n  }\r\n\r\n  double _clampValue(String componentName, String parameter, double value) {\r\n    final component = systemStateProvider.getComponentByName(componentName);\r\n    if (component == null) return value;\r\n\r\n    double? minValue = component.minValues[parameter];\r\n    double? maxValue = component.maxValues[parameter];\r\n\r\n    if (minValue != null && value < minValue) return minValue;\r\n    if (maxValue != null && value > maxValue) return maxValue;\r\n\r\n    return value;\r\n  }\r\n\r\n  void dispose() {\r\n    stopSimulation();\r\n  }\r\n}"
        }
    ]
}