{
    "sourceFile": "lib/modules/system_operation_also_main_module/widgets/alarm_indicator.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1734535157968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1734535157968,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\r\nimport 'package:flutter_bloc/flutter_bloc.dart';\r\nimport 'package:experiment_planner/features/alarm/bloc/alarm_bloc.dart';\r\nimport 'package:experiment_planner/features/alarm/bloc/alarm_state.dart';\r\nimport '../../../features/alarm/models/alarm.dart';\r\n\r\nclass AlarmIndicator extends StatelessWidget {\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return BlocBuilder<AlarmBloc, AlarmState>(\r\n      builder: (context, state) {\r\n        if (state is AlarmLoadSuccess) {\r\n          return GestureDetector(\r\n            onTap: () => _showAlarmDetails(context, state),\r\n            child: Row(\r\n              children: [\r\n                Icon(\r\n                  state.hasCriticalAlarm\r\n                      ? Icons.error_outline\r\n                      : state.hasActiveAlarms\r\n                          ? Icons.warning_amber_rounded\r\n                          : Icons.check_circle_outline,\r\n                  color: state.hasCriticalAlarm\r\n                      ? Colors.red\r\n                      : state.hasActiveAlarms\r\n                          ? Colors.orange\r\n                          : Colors.green,\r\n                  size: 16,\r\n                ),\r\n                SizedBox(width: 8),\r\n                Text(\r\n                  '${state.activeAlarms.length} Active Alarm${state.activeAlarms.length != 1 ? 's' : ''}',\r\n                  style: TextStyle(\r\n                    color: state.hasCriticalAlarm\r\n                        ? Colors.red\r\n                        : state.hasActiveAlarms\r\n                            ? Colors.orange\r\n                            : Colors.green,\r\n                  ),\r\n                ),\r\n              ],\r\n            ),\r\n          );\r\n        }\r\n        return SizedBox.shrink(); // Return empty widget if state is not loaded\r\n      },\r\n    );\r\n  }\r\n\r\n  void _showAlarmDetails(BuildContext context, AlarmLoadSuccess state) {\r\n    showDialog(\r\n      context: context,\r\n      builder: (BuildContext context) {\r\n        return AlertDialog(\r\n          title: Text('Active Alarms'),\r\n          content: SingleChildScrollView(\r\n            child: Column(\r\n              mainAxisSize: MainAxisSize.min,\r\n              crossAxisAlignment: CrossAxisAlignment.start,\r\n              children: state.activeAlarms.map((alarm) => _buildAlarmItem(alarm)).toList(),\r\n            ),\r\n          ),\r\n          actions: [\r\n            TextButton(\r\n              child: Text('Close'),\r\n              onPressed: () {\r\n                Navigator.of(context).pop();\r\n              },\r\n            ),\r\n          ],\r\n        );\r\n      },\r\n    );\r\n  }\r\n\r\n  Widget _buildAlarmItem(Alarm alarm) {\r\n    return Container(\r\n      padding: EdgeInsets.symmetric(vertical: 8),\r\n      child: Row(\r\n        children: [\r\n          Icon(\r\n            alarm.severity == AlarmSeverity.critical\r\n                ? Icons.error_outline\r\n                : Icons.warning_amber_rounded,\r\n            color: alarm.severity == AlarmSeverity.critical\r\n                ? Colors.red\r\n                : Colors.orange,\r\n            size: 16,\r\n          ),\r\n          SizedBox(width: 8),\r\n          Expanded(\r\n            child: Text(alarm.message),\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}"
        }
    ]
}